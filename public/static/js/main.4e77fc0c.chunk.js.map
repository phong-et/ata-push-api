{"version":3,"sources":["notifications.js","SubscribeButton.js","App.js","reportWebVitals.js","index.js"],"names":["pushServerPublicKey","askUserPermission","a","Notification","requestPermission","createNotificationSubscription","navigator","serviceWorker","ready","pushManager","subscribe","userVisibleOnly","applicationServerKey","getUserSubscription","then","getSubscription","pushSubscription","host","get","path","fetch","credentials","headers","method","mode","response","json","data","useStyles","makeStyles","theme","rightIcon","marginLeft","spacing","leftIcon","marginRight","SubscribeButton","props","css","useState","isSubscribed","setIsSubscribed","isSubscribing","setIsSubscribing","sendSubscription","subscription","console","log","body","JSON","stringify","localStorage","setItem","id","catch","err","alert","useEffect","window","getItem","register","IsExistedSubscriptionId","Button","onClick","disabled","variant","color","className","text","CircularProgress","size","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4e77fc0c.chunk.js","sourcesContent":["const pushServerPublicKey = \"BIN2Jc5Vmkmy-S3AUrcMlpKxJpLeVRAfu9WBqUbJ70SJOCWGCGXKY-Xzyh7HDr6KbRDGYHjqZ06OcS3BjD7uAm8\";\n\n/**\n * checks if Push notification and service workers are supported by your browser\n */\nfunction isPushNotificationSupported() {\n  return \"serviceWorker\" in navigator && \"PushManager\" in window;\n}\n\n/**\n * asks user consent to receive push notifications and returns the response of the user, one of granted, default, denied\n */\nasync function askUserPermission() {\n  return await Notification.requestPermission();\n}\n\nfunction registerServiceWorker() {\n  return navigator.serviceWorker.register(\"/sw.js\");\n}\n\n/**\n * using the registered service worker creates a push notification subscription and returns it\n */\nasync function createNotificationSubscription() {\n  //wait for service worker installation to be ready\n  const serviceWorker = await navigator.serviceWorker.ready;\n  // subscribe and return the subscription\n  return await serviceWorker.pushManager.subscribe({\n    userVisibleOnly: true,\n    applicationServerKey: pushServerPublicKey\n  });\n}\n\n/**\n * returns the subscription if present or nothing\n */\nfunction getUserSubscription() {\n  //wait for service worker installation to be ready, and then\n  return navigator.serviceWorker.ready\n    .then(function(serviceWorker) {\n      return serviceWorker.pushManager.getSubscription();\n    })\n    .then(function(pushSubscription) {\n      return pushSubscription;\n    });\n}\n\n/**\n * http utility \n */\nconst host = process.env.NODE_ENV === \"production\" ? \"https://ata-push-api.herokuapp.com\" : \"http://localhost:8888\";\nfunction post(path, body) {\n  return fetch(`${host}${path}`, {\n    credentials: \"omit\",\n    headers: { \"content-type\": \"application/json;charset=UTF-8\", \"sec-fetch-mode\": \"cors\" },\n    body: JSON.stringify(body),\n    method: \"POST\",\n    mode: \"cors\"\n  })\n    .then(function (response) {\n      return response.json();\n    })\n    .then(function (data) {\n      return data;\n    });\n}\n\nfunction get(path) {\n  return fetch(`${host}${path}`, {\n    credentials: \"omit\",\n    headers: { \"content-type\": \"application/json;charset=UTF-8\", \"sec-fetch-mode\": \"cors\" },\n    method: \"GET\",\n    mode: \"cors\"\n  })\n    .then(function (response) {\n      return response.json();\n    })\n    .then(function (data) {\n      return data;\n    });\n}\n\nexport {\n  isPushNotificationSupported,\n  askUserPermission,\n  registerServiceWorker,\n  createNotificationSubscription,\n  getUserSubscription,\n  post,\n  get\n};\n","import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Button, CircularProgress } from '@material-ui/core';\r\nimport AccessAlarmIcon from '@material-ui/icons/AccessAlarm';\r\nimport {\r\n  askUserPermission,\r\n  createNotificationSubscription,\r\n  getUserSubscription,\r\n  registerServiceWorker,\r\n  isPushNotificationSupported,\r\n  post,\r\n  get,\r\n} from './notifications';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  rightIcon: {\r\n    marginLeft: theme.spacing(1),\r\n  },\r\n  leftIcon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nexport function SubscribeButton(props) {\r\n  const css = useStyles(),\r\n    [isSubscribed, setIsSubscribed] = useState(false),\r\n    [isSubscribing, setIsSubscribing] = useState(false),\r\n    sendSubscription = async () => {\r\n      let subscription =\r\n        (await getUserSubscription()) ||\r\n        (await createNotificationSubscription());\r\n      console.log(subscription);\r\n      post('/subscription/create', subscription)\r\n        .then((response) => {\r\n          localStorage.setItem('subscriptionId', response.id);\r\n          setIsSubscribing(false);\r\n          setIsSubscribed(true);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n          setIsSubscribing(false);\r\n          setIsSubscribed(false);\r\n        });\r\n    },\r\n    subscribe = async () => {\r\n      setIsSubscribed(true);\r\n      setIsSubscribing(true);\r\n      let consent = await askUserPermission();\r\n      if (consent !== 'granted') {\r\n        alert(`You denied the consent to receive notifications.\r\n                  Please allow notification at \r\n                  chrome://settings/content/siteDetails?site=<domain>`);\r\n        setIsSubscribed(false);\r\n        setIsSubscribing(false);\r\n      } else {\r\n        sendSubscription();\r\n      }\r\n    };\r\n\r\n  useEffect(() => {\r\n    if (isPushNotificationSupported()) {\r\n      registerServiceWorker();\r\n      async function IsExistedSubscriptionId() {\r\n        setIsSubscribed(true);\r\n        setIsSubscribing(true);\r\n        // Check wheter subscription is existed\r\n        // If client allowed notification at browser before, it will be true\r\n        // In contrast it will be false\r\n        // Note: When user changed notification to \"Ask(default)\" after user allowed notification before\r\n        //       the push subscription will be created new and service push api will add more subscription id to list,\r\n        //       so the push service api will notify duplicately\r\n        //       => TODO\r\n        //          Implement authentication for push service api\r\n        //          Check duplicate subscription by username\r\n        let isExistedSubscription = (await getUserSubscription())\r\n          ? true\r\n          : false;\r\n        if (!isExistedSubscription) {\r\n          setIsSubscribed(false);\r\n          setIsSubscribing(false);\r\n          return;\r\n        }\r\n        // check when server lost subscription data (either service is stopped or another reason of service)\r\n        get('/subscription/check/' + localStorage.getItem('subscriptionId'))\r\n          .then((response) => {\r\n            let isExistedId = response['isExisted'];\r\n            if (isExistedId) setIsSubscribed(true);\r\n            else {\r\n              setIsSubscribed(false);\r\n              // send again\r\n              sendSubscription();\r\n            }\r\n            setIsSubscribing(false);\r\n          })\r\n          .catch((err) => {\r\n            console.log(err);\r\n            setIsSubscribing(false);\r\n            setIsSubscribed(false);\r\n          });\r\n      }\r\n      IsExistedSubscriptionId();\r\n    }\r\n  }, []);\r\n  return (\r\n    <Button\r\n      onClick={subscribe}\r\n      disabled={isSubscribed}\r\n      variant='contained'\r\n      color='primary'\r\n      className={css.leftIcon}\r\n    >\r\n      {props.text || 'Notify Attendance'}\r\n      {isSubscribing ? (\r\n        <CircularProgress size={18} className={css.rightIcon} />\r\n      ) : (\r\n        <AccessAlarmIcon className={css.rightIcon} />\r\n      )}\r\n    </Button>\r\n  );\r\n}\r\n","import './App.css';\nimport { SubscribeButton } from './SubscribeButton';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SubscribeButton />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}